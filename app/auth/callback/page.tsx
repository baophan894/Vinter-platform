// app/auth/callback/page.tsx
"use client"

import { useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { setAuthData } from '@/lib/auth'; // üëà Import h√†m c·ªßa b·∫°n
import { jwtDecode } from 'jwt-decode'; // üëà C√†i ƒë·∫∑t: npm install jwt-decode

interface UserData {
  _id: string;
  email: string;
  name: string;
  photo: string;
  role: string;
  id: string;
}

interface DecodedToken {
  sub: string;
  email: string;
  role: string;
  // ... c√°c tr∆∞·ªùng kh√°c n·∫øu c√≥
}

export default function AuthCallbackPage() {
  const router = useRouter();
  const searchParams = useSearchParams();

  useEffect(() => {
    const token = searchParams.get('token');

    if (token) {
      try {
        // Gi·∫£i m√£ token ƒë·ªÉ l·∫•y th√¥ng tin user
        const decodedToken: DecodedToken = jwtDecode(token);
        
        // T·∫°o l·∫°i ƒë·ªëi t∆∞·ª£ng user t·ª´ th√¥ng tin trong token
        // L∆∞u √Ω: C√°c th√¥ng tin chi ti·∫øt nh∆∞ 'photo', 'googleId' kh√¥ng c√≥ trong JWT,
        // b·∫°n c·∫ßn quy·∫øt ƒë·ªãnh xem c√≥ c·∫ßn ch√∫ng ngay hay kh√¥ng.
        const user: UserData = {
          _id: decodedToken.sub,
          id: decodedToken.sub,
          email: decodedToken.email,
          role: decodedToken.role,
          name: '', // Th√¥ng tin n√†y c√≥ th·ªÉ l·∫•y t·ª´ API /users/me sau ƒë√≥
          photo: '', // T∆∞∆°ng t·ª±
        };

        // ‚úÖ S·ª≠ d·ª•ng h√†m setAuthData c·ªßa b·∫°n ƒë·ªÉ l∆∞u c·∫£ token v√† user
        setAuthData({ token, user });

        // Chuy·ªÉn h∆∞·ªõng ng∆∞·ªùi d√πng ƒë·∫øn trang profile
        router.push('/profile'); 
      } catch(error) {
        console.error("Failed to process token:", error);
        router.push('/login');
      }
    } else {
      console.error("No token found in URL.");
      router.push('/login');
    }
  }, [router, searchParams]);

  return (
    <div className="flex items-center justify-center min-h-screen">
      <p>ƒêang x√°c th·ª±c, vui l√≤ng ch·ªù...</p>
    </div>
  );
}